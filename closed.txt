class closedHash {
private:
    char* array[20];
    int amountOfBitFields{};
    char used[10]{}; // если элемент массива равен данному, то он использовался

private:
    // хэш-функция, возвращающая первый свободный элемент массива
    // ИЛИ элемент массива, где уже лежит это имя
    // если не находит с первого раза – идет на повторное линейное хеширование
    // возвращает -1 (при переполнении))
    // (для INSERT)
    int hash(char name[10]);
        // считает сумму кодов символов и делит на кол-во элементов массива
        // если еще ни разу не использовался – возвращаем номер элемента
        // если имя уже есть и находится в num – возвращаем num

        // идем whileом, пока не встретим ранее не заполненный элемент
        // или же пока не сделаем полный круг
            // если уже есть такое имя – возвращаем его номер
            // если элемент пустой, но ранее использовался – запоминаем номер
        // если уткнулись в неиспользованный элемент – возвращаем номер первого пустого элемента
        // или же если прошли круг, но есть использованные пустые элементы
        // возвращаем -1 – переполнение (прописывается в insert)


    // для DELETE и MEMBER
    // возвращается либо номер элемента массива с name, либо -1
    int findName(char name[10]);
        // считает сумму кодов символов и делит на кол-во элементов массива
        // если еще ни разу не использовался – возвращаем -1
        // если имя уже есть и находится в num – возвращаем num

        // идем whileом, пока не встретим ранее не заполненный элемент
        // или же пока не сделаем полный круг
            // если уже есть такое имя – возвращаем его номер
        // возвращаем -1 – если не нашли имя


    // равны ли элементы
    static bool isEqual(const char firstName[10], const char secondName[10]);
        // сравнение посимвольное

    void destructor();

public:
    // конструктор – заполняет массив элементами notUsed
    closedHash();

    ~closedHash();

    // вставка имени в словарь
    void insert(char name[10]);
        // находим номер элемента массива, в который положим name в хэш-функции
        // если вернулось -1 – переполнение(пишем об этом в консоли)
        // проверяем вернувшееся значение num (если оно равно name – добавлять ничего не надо)
        // иначе заполняем нужный элемент новым именем


    // удаление имени из словаря
    void deletE(char name[10]);
        // находим номер элемента массива, в котором лежит name в хэш-функции
        // если != -1 (нашли такое имя) – присваиваем char used


    // есть ли имя в словаре?
    bool member(char name[10]);
        // находим номер элемента массива, в котором лежит name в хэш-функции
        // если != -1 (нашли такое имя) – возвращаем true

    void makeNull();

    void print();
};